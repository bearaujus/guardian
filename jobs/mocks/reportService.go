// Code generated by mockery v2.33.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	report "github.com/goto/guardian/core/report"
)

// ReportService is an autogenerated mock type for the reportService type
type ReportService struct {
	mock.Mock
}

type ReportService_Expecter struct {
	mock *mock.Mock
}

func (_m *ReportService) EXPECT() *ReportService_Expecter {
	return &ReportService_Expecter{mock: &_m.Mock}
}

// GetPendingApprovalsList provides a mock function with given fields: ctx, filters
func (_m *ReportService) GetPendingApprovalsList(ctx context.Context, filters *report.PendingApprovalsReportFilter) ([]*report.PendingApprovalModel, error) {
	ret := _m.Called(ctx, filters)

	var r0 []*report.PendingApprovalModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *report.PendingApprovalsReportFilter) ([]*report.PendingApprovalModel, error)); ok {
		return rf(ctx, filters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *report.PendingApprovalsReportFilter) []*report.PendingApprovalModel); ok {
		r0 = rf(ctx, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*report.PendingApprovalModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *report.PendingApprovalsReportFilter) error); ok {
		r1 = rf(ctx, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReportService_GetPendingApprovalsList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPendingApprovalsList'
type ReportService_GetPendingApprovalsList_Call struct {
	*mock.Call
}

// GetPendingApprovalsList is a helper method to define mock.On call
//   - ctx context.Context
//   - filters *report.PendingApprovalsReportFilter
func (_e *ReportService_Expecter) GetPendingApprovalsList(ctx interface{}, filters interface{}) *ReportService_GetPendingApprovalsList_Call {
	return &ReportService_GetPendingApprovalsList_Call{Call: _e.mock.On("GetPendingApprovalsList", ctx, filters)}
}

func (_c *ReportService_GetPendingApprovalsList_Call) Run(run func(ctx context.Context, filters *report.PendingApprovalsReportFilter)) *ReportService_GetPendingApprovalsList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*report.PendingApprovalsReportFilter))
	})
	return _c
}

func (_c *ReportService_GetPendingApprovalsList_Call) Return(_a0 []*report.PendingApprovalModel, _a1 error) *ReportService_GetPendingApprovalsList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReportService_GetPendingApprovalsList_Call) RunAndReturn(run func(context.Context, *report.PendingApprovalsReportFilter) ([]*report.PendingApprovalModel, error)) *ReportService_GetPendingApprovalsList_Call {
	_c.Call.Return(run)
	return _c
}

// NewReportService creates a new instance of ReportService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReportService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReportService {
	mock := &ReportService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
