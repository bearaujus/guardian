// Code generated by mockery v2.33.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/goto/guardian/domain"
	mock "github.com/stretchr/testify/mock"
)

// CommentService is an autogenerated mock type for the commentService type
type CommentService struct {
	mock.Mock
}

type CommentService_Expecter struct {
	mock *mock.Mock
}

func (_m *CommentService) EXPECT() *CommentService_Expecter {
	return &CommentService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *CommentService) Create(_a0 context.Context, _a1 *domain.Comment) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Comment) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CommentService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type CommentService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *domain.Comment
func (_e *CommentService_Expecter) Create(_a0 interface{}, _a1 interface{}) *CommentService_Create_Call {
	return &CommentService_Create_Call{Call: _e.mock.On("Create", _a0, _a1)}
}

func (_c *CommentService_Create_Call) Run(run func(_a0 context.Context, _a1 *domain.Comment)) *CommentService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Comment))
	})
	return _c
}

func (_c *CommentService_Create_Call) Return(_a0 error) *CommentService_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CommentService_Create_Call) RunAndReturn(run func(context.Context, *domain.Comment) error) *CommentService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: _a0, _a1
func (_m *CommentService) List(_a0 context.Context, _a1 domain.ListCommentsFilter) ([]*domain.Comment, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []*domain.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ListCommentsFilter) ([]*domain.Comment, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ListCommentsFilter) []*domain.Comment); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ListCommentsFilter) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CommentService_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type CommentService_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 domain.ListCommentsFilter
func (_e *CommentService_Expecter) List(_a0 interface{}, _a1 interface{}) *CommentService_List_Call {
	return &CommentService_List_Call{Call: _e.mock.On("List", _a0, _a1)}
}

func (_c *CommentService_List_Call) Run(run func(_a0 context.Context, _a1 domain.ListCommentsFilter)) *CommentService_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ListCommentsFilter))
	})
	return _c
}

func (_c *CommentService_List_Call) Return(_a0 []*domain.Comment, _a1 error) *CommentService_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CommentService_List_Call) RunAndReturn(run func(context.Context, domain.ListCommentsFilter) ([]*domain.Comment, error)) *CommentService_List_Call {
	_c.Call.Return(run)
	return _c
}

// NewCommentService creates a new instance of CommentService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCommentService(t interface {
	mock.TestingT
	Cleanup(func())
}) *CommentService {
	mock := &CommentService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
