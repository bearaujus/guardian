// Code generated by mockery v2.33.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/goto/guardian/domain"
	mock "github.com/stretchr/testify/mock"
)

// ApprovalService is an autogenerated mock type for the approvalService type
type ApprovalService struct {
	mock.Mock
}

type ApprovalService_Expecter struct {
	mock *mock.Mock
}

func (_m *ApprovalService) EXPECT() *ApprovalService_Expecter {
	return &ApprovalService_Expecter{mock: &_m.Mock}
}

// AddApprover provides a mock function with given fields: ctx, approvalID, email
func (_m *ApprovalService) AddApprover(ctx context.Context, approvalID string, email string) error {
	ret := _m.Called(ctx, approvalID, email)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, approvalID, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ApprovalService_AddApprover_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddApprover'
type ApprovalService_AddApprover_Call struct {
	*mock.Call
}

// AddApprover is a helper method to define mock.On call
//   - ctx context.Context
//   - approvalID string
//   - email string
func (_e *ApprovalService_Expecter) AddApprover(ctx interface{}, approvalID interface{}, email interface{}) *ApprovalService_AddApprover_Call {
	return &ApprovalService_AddApprover_Call{Call: _e.mock.On("AddApprover", ctx, approvalID, email)}
}

func (_c *ApprovalService_AddApprover_Call) Run(run func(ctx context.Context, approvalID string, email string)) *ApprovalService_AddApprover_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ApprovalService_AddApprover_Call) Return(_a0 error) *ApprovalService_AddApprover_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ApprovalService_AddApprover_Call) RunAndReturn(run func(context.Context, string, string) error) *ApprovalService_AddApprover_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteApprover provides a mock function with given fields: ctx, approvalID, email
func (_m *ApprovalService) DeleteApprover(ctx context.Context, approvalID string, email string) error {
	ret := _m.Called(ctx, approvalID, email)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, approvalID, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ApprovalService_DeleteApprover_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteApprover'
type ApprovalService_DeleteApprover_Call struct {
	*mock.Call
}

// DeleteApprover is a helper method to define mock.On call
//   - ctx context.Context
//   - approvalID string
//   - email string
func (_e *ApprovalService_Expecter) DeleteApprover(ctx interface{}, approvalID interface{}, email interface{}) *ApprovalService_DeleteApprover_Call {
	return &ApprovalService_DeleteApprover_Call{Call: _e.mock.On("DeleteApprover", ctx, approvalID, email)}
}

func (_c *ApprovalService_DeleteApprover_Call) Run(run func(ctx context.Context, approvalID string, email string)) *ApprovalService_DeleteApprover_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ApprovalService_DeleteApprover_Call) Return(_a0 error) *ApprovalService_DeleteApprover_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ApprovalService_DeleteApprover_Call) RunAndReturn(run func(context.Context, string, string) error) *ApprovalService_DeleteApprover_Call {
	_c.Call.Return(run)
	return _c
}

// GetApprovalsByAppealID provides a mock function with given fields: ctx, appealID
func (_m *ApprovalService) GetApprovalsByAppealID(ctx context.Context, appealID string) ([]*domain.Approval, error) {
	ret := _m.Called(ctx, appealID)

	var r0 []*domain.Approval
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*domain.Approval, error)); ok {
		return rf(ctx, appealID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*domain.Approval); ok {
		r0 = rf(ctx, appealID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Approval)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, appealID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApprovalService_GetApprovalsByAppealID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApprovalsByAppealID'
type ApprovalService_GetApprovalsByAppealID_Call struct {
	*mock.Call
}

// GetApprovalsByAppealID is a helper method to define mock.On call
//   - ctx context.Context
//   - appealID string
func (_e *ApprovalService_Expecter) GetApprovalsByAppealID(ctx interface{}, appealID interface{}) *ApprovalService_GetApprovalsByAppealID_Call {
	return &ApprovalService_GetApprovalsByAppealID_Call{Call: _e.mock.On("GetApprovalsByAppealID", ctx, appealID)}
}

func (_c *ApprovalService_GetApprovalsByAppealID_Call) Run(run func(ctx context.Context, appealID string)) *ApprovalService_GetApprovalsByAppealID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ApprovalService_GetApprovalsByAppealID_Call) Return(_a0 []*domain.Approval, _a1 error) *ApprovalService_GetApprovalsByAppealID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ApprovalService_GetApprovalsByAppealID_Call) RunAndReturn(run func(context.Context, string) ([]*domain.Approval, error)) *ApprovalService_GetApprovalsByAppealID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateApproval provides a mock function with given fields: ctx, approval
func (_m *ApprovalService) UpdateApproval(ctx context.Context, approval *domain.Approval) error {
	ret := _m.Called(ctx, approval)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Approval) error); ok {
		r0 = rf(ctx, approval)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ApprovalService_UpdateApproval_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateApproval'
type ApprovalService_UpdateApproval_Call struct {
	*mock.Call
}

// UpdateApproval is a helper method to define mock.On call
//   - ctx context.Context
//   - approval *domain.Approval
func (_e *ApprovalService_Expecter) UpdateApproval(ctx interface{}, approval interface{}) *ApprovalService_UpdateApproval_Call {
	return &ApprovalService_UpdateApproval_Call{Call: _e.mock.On("UpdateApproval", ctx, approval)}
}

func (_c *ApprovalService_UpdateApproval_Call) Run(run func(ctx context.Context, approval *domain.Approval)) *ApprovalService_UpdateApproval_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Approval))
	})
	return _c
}

func (_c *ApprovalService_UpdateApproval_Call) Return(_a0 error) *ApprovalService_UpdateApproval_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ApprovalService_UpdateApproval_Call) RunAndReturn(run func(context.Context, *domain.Approval) error) *ApprovalService_UpdateApproval_Call {
	_c.Call.Return(run)
	return _c
}

// NewApprovalService creates a new instance of ApprovalService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewApprovalService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ApprovalService {
	mock := &ApprovalService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
