// Code generated by mockery v2.33.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/goto/guardian/domain"
	mock "github.com/stretchr/testify/mock"
)

// MetadataManager is an autogenerated mock type for the metadataManager type
type MetadataManager struct {
	mock.Mock
}

type MetadataManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MetadataManager) EXPECT() *MetadataManager_Expecter {
	return &MetadataManager_Expecter{mock: &_m.Mock}
}

// ParseMetadataConfig provides a mock function with given fields: _a0
func (_m *MetadataManager) ParseMetadataConfig(_a0 *domain.AppealMetadataConfig) (domain.SensitiveConfig, error) {
	ret := _m.Called(_a0)

	var r0 domain.SensitiveConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.AppealMetadataConfig) (domain.SensitiveConfig, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*domain.AppealMetadataConfig) domain.SensitiveConfig); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.SensitiveConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.AppealMetadataConfig) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MetadataManager_ParseMetadataConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseMetadataConfig'
type MetadataManager_ParseMetadataConfig_Call struct {
	*mock.Call
}

// ParseMetadataConfig is a helper method to define mock.On call
//   - _a0 *domain.AppealMetadataConfig
func (_e *MetadataManager_Expecter) ParseMetadataConfig(_a0 interface{}) *MetadataManager_ParseMetadataConfig_Call {
	return &MetadataManager_ParseMetadataConfig_Call{Call: _e.mock.On("ParseMetadataConfig", _a0)}
}

func (_c *MetadataManager_ParseMetadataConfig_Call) Run(run func(_a0 *domain.AppealMetadataConfig)) *MetadataManager_ParseMetadataConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*domain.AppealMetadataConfig))
	})
	return _c
}

func (_c *MetadataManager_ParseMetadataConfig_Call) Return(_a0 domain.SensitiveConfig, _a1 error) *MetadataManager_ParseMetadataConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MetadataManager_ParseMetadataConfig_Call) RunAndReturn(run func(*domain.AppealMetadataConfig) (domain.SensitiveConfig, error)) *MetadataManager_ParseMetadataConfig_Call {
	_c.Call.Return(run)
	return _c
}

// NewMetadataManager creates a new instance of MetadataManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMetadataManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MetadataManager {
	mock := &MetadataManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
