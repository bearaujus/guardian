"use strict";(self.webpackChunkguardian=self.webpackChunkguardian||[]).push([[182],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return g}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=r.createContext({}),s=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=s(e.components);return r.createElement(u.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(t),g=a,m=d["".concat(u,".").concat(g)]||d[g]||p[g]||i;return t?r.createElement(m,o(o({ref:n},c),{},{components:t})):r.createElement(m,o({ref:n},c))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=d;var l={};for(var u in n)hasOwnProperty.call(n,u)&&(l[u]=n[u]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8591:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return o},default:function(){return p},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return s}});var r=t(3117),a=(t(7294),t(3905));const i={},o="Configuration",l={unversionedId:"tour/configuration",id:"tour/configuration",title:"Configuration",description:"Guardian binary contains both the CLI client and the server itself. Each has it's own configuration in order to run. Server configuration contains information such as database credentials, log severity, etc. while CLI client configuration only has configuration about which server to connect.",source:"@site/docs/tour/configuration.md",sourceDirName:"tour",slug:"/tour/configuration",permalink:"/guardian/docs/tour/configuration",draft:!1,editUrl:"https://github.com/odpf/guardian/edit/master/docs/docs/tour/configuration.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Introduction",permalink:"/guardian/docs/tour/introduction"},next:{title:"Create a policy",permalink:"/guardian/docs/tour/create-policy"}},u={},s=[{value:"Server",id:"server",level:2},{value:"Pre-requisites",id:"pre-requisites",level:4},{value:"Initialization",id:"initialization",level:4},{value:"Starting the server",id:"starting-the-server",level:4},{value:"Using <code>--config</code> flag",id:"using---config-flag",level:5},{value:"Using environment variables",id:"using-environment-variables",level:5},{value:"CLI Client",id:"cli-client",level:2},{value:"Initialization",id:"initialization-1",level:3}],c={toc:s};function p(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"configuration"},"Configuration"),(0,a.kt)("p",null,"Guardian binary contains both the CLI client and the server itself. Each has it's own configuration in order to run. Server configuration contains information such as database credentials, log severity, etc. while CLI client configuration only has configuration about which server to connect."),(0,a.kt)("h2",{id:"server"},"Server"),(0,a.kt)("h4",{id:"pre-requisites"},"Pre-requisites"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Postgres"),(0,a.kt)("li",{parentName:"ul"},"Slackbot access token for notification (optional)")),(0,a.kt)("h4",{id:"initialization"},"Initialization"),(0,a.kt)("p",null,"Create a config.yaml file (",(0,a.kt)("inlineCode",{parentName:"p"},"touch config.yaml"),") in the root folder of guardian project or ",(0,a.kt)("a",{parentName:"p",href:"#using---config-flag"},"use ",(0,a.kt)("inlineCode",{parentName:"a"},"--config")," flag")," to customize to config file location, or you can also ",(0,a.kt)("a",{parentName:"p",href:"#using-environment-variables"},"use environment variables")," to provide the server config. Setup up a database in postgres and provide the details in the DB field as given in the example below. For the purpose of this tutorial, we'll assume that the username is ",(0,a.kt)("inlineCode",{parentName:"p"},"your_user"),", database name is ",(0,a.kt)("inlineCode",{parentName:"p"},"guardian"),", host and port are ",(0,a.kt)("inlineCode",{parentName:"p"},"localhost")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"5432"),"."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"If you're new to YAML and want to learn more, see ",(0,a.kt)("a",{parentName:"p",href:"https://learnxinyminutes.com/docs/yaml/"},"Learn YAML in Y minutes."))),(0,a.kt)("p",null,"Following is a sample server configuration yaml:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"PORT: 3000\nLOG:\n  LEVEL: info # debug|info|warning|error|fatal - default: info\nDB:\n  HOST: localhost\n  USER: your_user\n  PASSWORD: your_password\n  NAME: guardian\n  PORT: 5432\nNOTIFIER:\n  PROVIDER: slack\n  ACCESS_TOKEN: <slack-access-token>\n  ...\nAUTHENTICATED_USER_HEADER_KEY: X-Auth-Email\nJOBS:\n  FETCH_RESOURCES:\n    ENABLED: true\n    INTERVAL: '0 */2 * * *'  #\"At minute 0 past every 2nd hour\"\n  REVOKE_EXPIRED_ACCESS:\n    ENABLED: true\n    INTERVAL: '*/20 * * * *'  #\u201cAt every 20th minute\"\n  EXPIRING_ACCESS_NOTIFICATION:\n    ENABLED: true\n    INTERVAL: '0 9 * * *' #\"At minute 0 past hour 9\"\n")),(0,a.kt)("h4",{id:"starting-the-server"},"Starting the server"),(0,a.kt)("p",null,"Database migration is required during the first server initialization. In addition, re-running the migration command might be needed in a new release to apply the new schema changes (if any). It's safer to always re-run the migration script before deploying/starting a new release."),(0,a.kt)("p",null,"To initialize the database schema, Run Migrations with the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"$ guardian server migrate\n")),(0,a.kt)("p",null,"To run the Guardian server use command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"$ guardian server start\n")),(0,a.kt)("h5",{id:"using---config-flag"},"Using ",(0,a.kt)("inlineCode",{parentName:"h5"},"--config")," flag"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"$ guardian server migrate --config=<path-to-file>\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"$ guardian server start --config=<path-to-file>\n")),(0,a.kt)("h5",{id:"using-environment-variables"},"Using environment variables"),(0,a.kt)("p",null,"All the configs can be passed as environment variables using underscore ",(0,a.kt)("inlineCode",{parentName:"p"},"_")," as the delimiter between nested keys. See the following examples"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"PORT: 8080\nDB:\n  HOST: localhost\n  USER: test\n")),(0,a.kt)("p",null,"Here is the corresponding environment variable for the above"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Configuration key"),(0,a.kt)("th",{parentName:"tr",align:null},"Environment variable"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"PORT"),(0,a.kt)("td",{parentName:"tr",align:null},"PORT")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"DB.HOST"),(0,a.kt)("td",{parentName:"tr",align:null},"DB_HOST")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"DB.USER"),(0,a.kt)("td",{parentName:"tr",align:null},"DB_USER")))),(0,a.kt)("p",null,"Set the env variable using export"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ export PORT=8080\n")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"cli-client"},"CLI Client"),(0,a.kt)("h3",{id:"initialization-1"},"Initialization"),(0,a.kt)("p",null,"Guardian CLI supports CLI client to communicate with a Guardian server. To initialize the client configuration, run the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"$ guardian config init\n")),(0,a.kt)("p",null,"A yaml file will be created in the ",(0,a.kt)("inlineCode",{parentName:"p"},"~/.config/odpf/guardian.yaml")," directory. Open this file to configure the host for Guardian server as in the example below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'host: "localhost:8080"\n')))}p.isMDXComponent=!0}}]);