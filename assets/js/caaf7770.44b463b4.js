"use strict";(self.webpackChunkguardian=self.webpackChunkguardian||[]).push([[119],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return m}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=u(t),m=a,h=d["".concat(s,".").concat(m)]||d[m]||p[m]||i;return t?r.createElement(h,l(l({ref:n},c),{},{components:t})):r.createElement(h,l({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=d;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var u=2;u<i;u++)l[u]=t[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5667:function(e,n,t){t.r(n),t.d(n,{assets:function(){return s},contentTitle:function(){return l},default:function(){return p},frontMatter:function(){return i},metadata:function(){return o},toc:function(){return u}});var r=t(3117),a=(t(7294),t(3905));const i={},l="Server Installation",o={unversionedId:"guides/deployment",id:"guides/deployment",title:"Server Installation",description:"There are several approaches to setup Guardian Server",source:"@site/docs/guides/deployment.md",sourceDirName:"guides",slug:"/guides/deployment",permalink:"/guardian/docs/guides/deployment",draft:!1,editUrl:"https://github.com/goto/guardian/edit/master/docs/docs/guides/deployment.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Architecture",permalink:"/guardian/docs/concepts/architecture"},next:{title:"Big Query",permalink:"/guardian/docs/providers/bigquery"}},s={},u=[{value:"General pre-requisites",id:"general-pre-requisites",level:2},{value:"Using the CLI",id:"using-the-cli",level:2},{value:"Pre-requisites for CLI",id:"pre-requisites-for-cli",level:3},{value:"Use the Docker",id:"use-the-docker",level:2},{value:"Using environment variables",id:"using-environment-variables",level:3},{value:"Using config file",id:"using-config-file",level:3},{value:"Use the Helm chart",id:"use-the-helm-chart",level:2},{value:"Pre-requisites for Helm chart",id:"pre-requisites-for-helm-chart",level:3},{value:"Add goto Helm repository",id:"add-goto-helm-repository",level:3},{value:"Setup helm values",id:"setup-helm-values",level:3}],c={toc:u};function p(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"server-installation"},"Server Installation"),(0,a.kt)("p",null,"There are several approaches to setup Guardian Server"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"#using-the-cli"},"Using the CLI")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"#use-the-docker-image"},"Using the Docker")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"#use-the-helm-chart"},"Using the Helm Chart"))),(0,a.kt)("h2",{id:"general-pre-requisites"},"General pre-requisites"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"PostgreSQL (version 13 or above)"),(0,a.kt)("li",{parentName:"ul"},"Slackbot access token for notification (optional)")),(0,a.kt)("h2",{id:"using-the-cli"},"Using the CLI"),(0,a.kt)("h3",{id:"pre-requisites-for-cli"},"Pre-requisites for CLI"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/tour/configuration#initialization"},"Create guardian config file"))),(0,a.kt)("p",null,"To run the Guardian server use command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"$ guardian server start -c <path-to-config>\n")),(0,a.kt)("h2",{id:"use-the-docker"},"Use the Docker"),(0,a.kt)("p",null,"To run the Guardian server using Docker, you need to have Docker installed on your system. You can find the installation instructions ",(0,a.kt)("a",{parentName:"p",href:"https://docs.docker.com/get-docker/"},"here"),"."),(0,a.kt)("p",null,"You can choose to set the configuration using environment variables or a config file. The environment variables will override the config file."),(0,a.kt)("h3",{id:"using-environment-variables"},"Using environment variables"),(0,a.kt)("p",null,"All the configs can be passed as environment variables using underscore ",(0,a.kt)("inlineCode",{parentName:"p"},"_")," as the delimiter between nested keys. See the following examples"),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"/docs/reference/configuration"},"configuration reference")," for the list of all the configuration keys."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh",metastring:'title=".env"',title:'".env"'},'PORT=8080\nAUTHENTICATED_USER_HEADER_KEY=X-Auth-Email\nDB_HOST=<db-host>\nDB_NAME=<db-name>\nDB_PASSWORD=<db-password>\nDB_PORT=<db-port>\nDB_USER=<db-user>\nENCRYPTION_SECRET_KEY=<secure-encription-key>\nJOBS_EXPIRING_GRANT_NOTIFICATION_ENABLED=true\nJOBS_REVOKE_EXPIRED_GRANTS_ENABLED=true\nJOBS_REVOKE_EXPIRED_GRANTS_INTERVAL="*/20 * * * *"\nNOTIFIER_ACCESS_TOKEN=<slack-access-token>\nNOTIFIER_PROVIDER=slack\n')),(0,a.kt)("p",null,"Run the following command to start the server"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"$ docker run -d \\\n    --restart=always \\\n    -p 8080:8080 \\\n    --env-file .env \\\n    --name guardian-server \\\n    gotocompany/guardian:<version> \\\n    server start\n")),(0,a.kt)("h3",{id:"using-config-file"},"Using config file"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="config.yaml"',title:'"config.yaml"'},'port: 8080\nencryption_secret_key: "<secret-key>"\ndb:\n    host: "<db-host>"\n    user: "<db-user>"\n    password: "<db-password>"\n    name: "<db-name>"\n    port: "<db-port>"\nauthenticated_user_header_key: "X-Auth-Email"\njobs:\n    fetch_resources:\n        enabled: true\n        interval: "0 */2 * * *"\n    revoke_expired_grants:\n        enabled: true\n        interval: "*/20 * * * *"\n    expiring_grant_notification:\n        enabled: true\n        interval: "0 9 * * *"\nnotifier:\n    provider: "slack"\n    access_token: "<slack-access-token>"\n')),(0,a.kt)("p",null,"Run the following command to start the server"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"$ docker run -d \\\n    --restart=always \\\n    -p 8080:8080 \\\n    -v $(pwd)/config.yaml:/config.yaml \\\n    --name guardian-server \\\n    gotocompany/guardian:<version> \\\n    server start -c /config.yaml\n")),(0,a.kt)("h2",{id:"use-the-helm-chart"},"Use the Helm chart"),(0,a.kt)("h3",{id:"pre-requisites-for-helm-chart"},"Pre-requisites for Helm chart"),(0,a.kt)("p",null,"Guardian can be installed in Kubernetes using the Helm chart from ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/goto/charts"},"https://github.com/goto/charts"),"."),(0,a.kt)("p",null,"Ensure that the following requirements are met:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Kubernetes 1.14+"),(0,a.kt)("li",{parentName:"ul"},"Helm version 3.x is ",(0,a.kt)("a",{parentName:"li",href:"https://helm.sh/docs/intro/install/"},"installed"))),(0,a.kt)("h3",{id:"add-goto-helm-repository"},"Add goto Helm repository"),(0,a.kt)("p",null,"Add goto chart repository to Helm:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"helm repo add goto https://goto.github.io/charts/\n")),(0,a.kt)("p",null,"You can update the chart repository by running:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"helm repo update\n")),(0,a.kt)("h3",{id:"setup-helm-values"},"Setup helm values"),(0,a.kt)("p",null,"The following table lists the configurable parameters of the Guardian chart and their default values."),(0,a.kt)("p",null,"See full helm values guide ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/goto/charts/tree/main/stable/guardian#values"},"here"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="values.yaml"',title:'"values.yaml"'},'app:\n\n  ## Value to fully override guardian.name template\n  nameOverride: ""\n  ## Value to fully override guardian.fullname template\n  fullnameOverride: ""\n\n  image:\n    repository: gotocompany/guardian\n    pullPolicy: Always\n    tag: latest\n  container:\n    args:\n      - server\n      - start\n    livenessProbe:\n      httpGet:\n        path: /ping\n        port: tcp\n    readinessProbe:\n      httpGet:\n        path: /ping\n        port: tcp\n\n  migration:\n    enabled: true\n    args:\n      - server\n      - migrate\n\n  service:\n    annotations:\n      projectcontour.io/upstream-protocol.h2c: tcp\n\n  cron:\n    enabled: true\n    jobs:\n      - name: "fetch-resources"\n        schedule: "0 */2 * * *"\n        restartPolicy: Never\n        command: []\n        args:\n          - job\n          - run\n          - fetch_resources\n      - name: "appeal-expiration-reminder"\n        schedule: "0 9 * * *"\n        restartPolicy: Never\n        command: []\n        args:\n          - job\n          - run\n          - appeal_expiration_reminder\n      - name: "appeal-expiration-revocation"\n        schedule: "*/20 * * * *"\n        restartPolicy: Never\n        command: []\n        args:\n          - job\n          - run\n          - appeal_expiration_revocation\n\n  ingress:\n    enabled: true\n    annotations:\n      kubernetes.io/ingress.class: contour\n    hosts:\n      - host: guardian.example.com\n        paths:\n          - path: /\n            pathType: ImplementationSpecific\n            backend:\n              service:\n                # name: backend_01\n                port:\n                  number: 80\n\n  config:\n    LOG_LEVEL: info\n    AUTHENTICATED_USER_HEADER_KEY: x-authenticated-user-email\n    NOTIFIER_PROVIDER: slack\n    JOBS_FETCH_RESOURCES_ENABLED: false\n    JOBS_FETCH_RESOURCES_INTERVAL: "0 */2 * * *"\n    JOBS_REVOKE_EXPIRED_ACCESS_ENABLED: false\n    JOBS_REVOKE_EXPIRED_ACCESS_INTERVAL: "*/20 * * * *"\n    JOBS_EXPIRING_ACCESS_NOTIFICATION_ENABLED: false\n    JOBS_EXPIRING_ACCESS_NOTIFICATION_INTERVAL: "0 9 * * *"\n\n\n  secretConfig:\n    ENCRYPTION_SECRET_KEY:\n    NOTIFIER_ACCESS_TOKEN:\n    DB_HOST: localhost\n    DB_PORT:\n    DB_NAME: guardian\n    DB_USER: guardian\n    DB_PASSWORD:\n')),(0,a.kt)("p",null,"And install it with the helm command line along with the values file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"$ helm install my-release -f values.yaml goto/guardian\n")))}p.isMDXComponent=!0}}]);