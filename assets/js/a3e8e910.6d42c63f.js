"use strict";(self.webpackChunkguardian=self.webpackChunkguardian||[]).push([[468],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),m=l(n),d=a,g=m["".concat(s,".").concat(d)]||m[d]||u[d]||o;return n?r.createElement(g,i(i({ref:t},c),{},{components:n})):r.createElement(g,i({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:a,i[1]=p;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},596:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return i},default:function(){return u},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return l}});var r=n(3117),a=(n(7294),n(3905));const o={},i="More Complex Use Case Example",p={unversionedId:"guides/complex-use-case",id:"guides/complex-use-case",title:"More Complex Use Case Example",description:"In this example we will explain some more details around the policy configuartions. Guardian can connect to an external identity manager to retrieve user details information. When a user creates an appeal using the policy given below, Guardian will connect to http://youridentitymanager.com/api/users/ for taking the user information defined in the iam_schema within the policy.",source:"@site/docs/guides/complex-use-case.md",sourceDirName:"guides",slug:"/guides/complex-use-case",permalink:"/guardian/docs/guides/complex-use-case",draft:!1,editUrl:"https://github.com/odpf/guardian/edit/master/docs/docs/guides/complex-use-case.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Approve/Reject Appeal",permalink:"/guardian/docs/guides/approve-reject-appeal"},next:{title:"Big Query",permalink:"/guardian/docs/providers/bigquery"}},s={},l=[{value:"Policy Example",id:"policy-example",level:3},{value:"Explanation",id:"explanation",level:3}],c={toc:l};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"more-complex-use-case-example"},"More Complex Use Case Example"),(0,a.kt)("p",null,"In this example we will explain some more details around the policy configuartions. Guardian can connect to an external identity manager to retrieve user details information. When a user creates an appeal using the policy given below, Guardian will connect to ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"http://youridentitymanager.com/api/users/{user_id}"))," for taking the user information defined in the ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"iam_schema"))," within the policy. "),(0,a.kt)("h3",{id:"policy-example"},"Policy Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'id: my-second-policy\niam:\n  provider: http\n  config:\n    url: http://youridentitymanager.com/api/users/{user_id}\n  schema:\n    email: email\n    name: fullName\n    company: companyName\nsteps:\n- name: employee_check\n  description: only allow employee to access our resources\n  strategy: auto\n  approve_if: $appeal.creator.company == "Company Name"\n- name: resource_owner_approval\n  description: resource owner approval. Will skip this for playground dataset\n  strategy: manual\n  when: not ($appeal.resource.type == "dataset" && $appeal.resource.urn == "my-bq-project:playground")\n  approvers:\n  - $appeal.resource.details.owner\n')),(0,a.kt)("h3",{id:"explanation"},"Explanation"),(0,a.kt)("p",null,"For the approval, a user's appeal will follow the steps ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"employee_check"))," and ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"resource_owner_approval"))," in the same order.\nThe first step is an ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"auto"))," strategy which checks the pre-defined condition that the employee who is requesting for the access belongs to the same company. Until then the status of the appeal will be ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"pending"))," for the first step(",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"employee_check")),"), and ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"blocked"))," for the second step(",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"resource_owner_approval")),")."),(0,a.kt)("p",null,"Once this is approved, the status is updated to ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"approved"))," and ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"pending"))," for the two steps respectively. The ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"when"))," field contains the condition for which the step can be skipped. In this case, if the appeal is for a playground dataset, the resource owner approval is not required, otherwise owner's approval is required to get the status of appeal to ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"active")),"."))}u.isMDXComponent=!0}}]);